/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R  &kp T      &kp Y      &kp U  &kp I          &kp O    &kp P          &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D      &kp F  &kp G      &kp H      &kp J  &kp K          &kp L    &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V  &kp B      &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH       &kp ESC
                         &kp LCTRL  &mo 1  &kp SPACE  &kp ENTER  &mo 2  &kp RIGHT_ALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB                          &kp F1           &kp F2           &kp F3           &kp F4           &kp F5           &kp F6      &kp F7           &kp F8      &kp F9  &kp F10  &kp BSPC
&bt BT_CLR                       &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &rgb_ug RGB_OFF  &bl BL_TOG  &bl BL_ON        &bl BL_OFF  &trans  &kp SQT  &trans
&rgb_ug RGB_COLOR_HSB(0,100,49)  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_ON   &trans      &trans           &trans      &trans  &trans   &trans
                                                                   &rgb_ug RGB_SPI  &trans           &rgb_ug RGB_SPD  &trans      &kp RIGHT_SHIFT  &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp ESC     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &kp HOME  &trans    &kp UP    &trans     &trans  &trans
&trans  &kp CAPS    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp AT           &kp END   &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &kp DELETE  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT          &trans    &trans    &trans    &trans     &trans  &trans
                                     &trans           &trans           &trans           &trans    &trans    &trans
            >;
        };
    };
};
